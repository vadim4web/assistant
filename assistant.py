import os
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from telethon import TelegramClient, events
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telethon.tl.custom.message import Message

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ API –∫–ª—é—á—ñ –∑ .env ---
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
SESSION_NAME = os.getenv("SESSION_NAME", "assistant_session")

# --- –Ü–º'—è —Ñ–∞–π–ª—É —Å–µ—Å—ñ—ó ---
session_file = f"{SESSION_NAME}.session"
if not os.path.exists(session_file):
    print(f"‚ùå Session —Ñ–∞–π–ª {session_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π start.sh –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SESSION_B64.")
    exit(1)

# --- –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ ---
client = TelegramClient(session_file, API_ID, API_HASH)
scheduler = AsyncIOScheduler(timezone=ZoneInfo("Europe/Kyiv"))

# --- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ ---
def format_dt(dt: datetime) -> str:
    return dt.strftime("**%Y-%m-%d-%H-%M**")

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
async def send_to_users(usernames, message_obj: Message, run_dt):
    log = []
    success = 0

    # –ë–µ—Ä–µ–º–æ –ª–∏—à–µ —Ç—ñ–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ ####
    message_cut = message_obj.message.split("####")[0].strip()
    message_obj.message = message_cut

    for uname in usernames:
        try:
            entity = await client.get_entity(uname.lstrip("@"))
            await client.send_message(entity, message_obj)
            log.append(f"‚úÖ {uname}")
            success += 1
            await asyncio.sleep(1)
        except Exception as e:
            log.append(f"‚ùå {uname}: {e}")

    # –ó–≤—ñ—Ç –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É
    summary = (
        f"üìã –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ **{success}/{len(usernames)}** –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {format_dt(run_dt)}:\n"
        + "\n".join(log)
    )
    await client.send_message("me", summary, parse_mode="markdown")

# --- –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@client.on(events.NewMessage(chats="me"))
async def handler(event):
    parts = event.raw_text.split("####")
    if len(parts) < 3:
        return

    users = [u.strip() for u in parts[1].split() if u.strip()]
    time_block = parts[2].strip()

    try:
        run_dt = datetime.strptime(time_block, "%Y-%m-%d-%H-%M").replace(tzinfo=ZoneInfo("Europe/Kyiv"))
    except ValueError:
        await client.send_message("me", "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π YYYY-MM-DD-HH-MM.")
        return

    # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
    scheduler.add_job(send_to_users, "date", run_date=run_dt, args=[users, event.message, run_dt])
    await client.send_message(
        "me",
        f"‚è∞ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ **{len(users)}** –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ {format_dt(run_dt)}",
        parse_mode="markdown"
    )

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
async def main():
    await client.start()
    scheduler.start()
    print("–ü–æ–º—ñ—á–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ. –ß–µ–∫–∞—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —É Saved Messages...")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
